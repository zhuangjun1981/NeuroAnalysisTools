{
  "Interface" :
  {
    "SuperInterface" :
    {
      "source" :
      {
        "_datatype" : "str",
        "_description" : "Origin of the data represented in this interface",
        "_include" : "optional"
      },
	    "_mandatory_timeseries" : [ ],
      "[]" :
      {
        "_datatype" : "unrestricted",
        "_description" : "custom field",
        "_include" : "optional",
        "_attributes" : 
        {
          "neurodata_type" :
          {
            "_datatype" : "str",
            "_description" : "Custom field",
            "_value" : "Custom",
            "_include" : "required"
          }
        }
      },
      "_attributes" :
      {
        "neurodata_type" : 
        {
          "_datatype" : "str", "_include" : "required", "_value" : "Interface"
        },
        "source" :
        {
          "_datatype" : "str",
          "_description" : "Origin of the data represented in this interface",
          "_include" : "standard"
        }
      }
    },
    "Position" :
    {
      "_description" : "Position data, whether along the x, xy or xyz axis",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "SpatialSeries" ]
    },
    "EyeTracking" :
    {
      "_description" : "Eye-tracking data, representing direction of gaze",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "SpatialSeries" ]
    },
    "PupilTracking" :
    {
      "_description" : "Eye-tracking data, representing pupil size",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "TimeSeries" ]
    },
    "CompassDirection" :
    {
      "_description" : "Direction as measured radially. Spatial series reference frame should indicate which direction corresponds to zero and what is the direction of positive rotation",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "SpatialSeries" ]
    },
    "FilteredEphys" :
    {
      "_description" : "Ephys data from one or more channels that is subjected to filtering, such as for gamma or theta oscillations (LFP has its own interface). Filter properties should be noted in the ElectricalSeries",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "ElectricalSeries" ]
    },
    "LFP" :
    {
      "_description" : "LFP data from one or more channels. Filter properties should be noted in the ElectricalSeries",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "TimeSeries" ]
    },
    "EventWaveform" :
    {
      "_description" : "Waveform of detected extracellularly recorded spike events",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "SpikeEventSeries" ]
    },
    "EventDetection" :
    {
      "_description" : "General container for storing event series",
      "_include" : "optional",
      "times" :
      {
        "_datatype" : "f8",
        "_include" : "required"
      },
      "detection_method" :
      {
        "_datatype" : "str",
        "_description" : "Description of how events were detected, such as voltage threshold, or dV/dT threshold, as well as relevant values",
        "_include" : "required"
      },
      "source_idx" : 
      {
        "_datatype" : "int32",
        "_description" : "Indices into source TimeSeries::data array corresponding to time of event. Module description should define what is meant by time of event (eg, .25ms before threshold crossing). Index points to each event in the raw data",
        "_include" : "required"
      },
      "source_electricalseries" :
      {
        "_datatype" : "timeseries",
        "_description" : "HDF5 link to ElectricalSeries that events were pulled from",
        "_include" : "required"
      },
      "source_electricalseries_path" :
      {
        "_datatype" : "text",
        "_description" : "Path to ElectricalSeries that events were pulled from",
        "_include" : "required"
      }
    },
    "FeatureExtraction" :
    {
      "_description" : "Container for salient features of detected events",
      "_include" : "optional",
      "features" :
      {
        "_datatype" : "f4",
        "_description" : "Multi-dimensional array of features extracted from each event. Array structure: [event number][channel number][feature number]",
        "_include" : "required"
      },
      "times" :
      {
        "_datatype" : "f8",
        "_description" : "Time of events that features correspond to (can be link",
        "_include" : "required"
      },
      "description" :
      {
        "_datatype" : "str",
        "_description" : "Text array with description (eg, PC1) for each of the extracted features",
        "_include" : "required"
      },
      "electrode_idx" :
      {
        "_datatype" : "int32",
        "_description" : "Indices of each channel here to electrodes described in extracellular_ephys/electrode_map",
        "_include" : "required"
      }
    },
    "Clustering" :
    {
      "_description" : "Clustered spike data, whether from automatic clustering tools (eg, klustakwik) or as a result of manual sorting",
      "_include" : "optional",
      "times" :
      {
        "_datatype" : "f8",
        "_description" : "Times of clustered events",
        "_include" : "required"
      },
      "num" :
      {
        "_datatype" : "int32",
        "_description" : "Cluster number for each event",
        "_include" : "required"
      },
      "cluster_nums" :
      {
        "_datatype" : "int32",
        "_description" : "List of cluster numbers that are part of this interface (cluster numbers can be non-continuous)",
        "_include" : "required"
      },
      "peak_over_rms" :
      {
        "_datatype" : "f4",
        "_description" : "Maximum ratio of waveform peak to RMS on any cahnnel in the cluster (basic clustering metric)",
        "_include" : "required"
      },
      "description" :
      {
        "_datatype" : "str",
        "_description" : "Description of clusters or clustering (eg, cluster 0 is electrical noise, clusters curated using Klusters, etc)",
        "_include" : "required"
      }
    },
    "ClusterWaveform" :
    {
      "_description" : "Mean waveform shape of clusters. Waveforms should be high-pass filtered (ie, not the same bandpass filter used waveform analysis and clustering",
      "_include" : "optional",
      "waveform_mean" :
      {
        "_datatype" : "f4",
        "_description" : "Mean waveform of each cluster, using the same indices for each wave as cluster numbers in the associated clustering module (ie, cluster 3 is array slot [3]. Slots for missing clusters should be zero-filled",
        "_include" : "required"
      },
      "waveform_sd" :
      {
        "_datatype" : "f4",
        "_description" : "Standard deviation of all points in waveforms for each cluster",
        "_include" : "required"
      },
      "waveform_filtering" :
      {
        "_datatype" : "str",
        "_description" : "Filtering applied to data before generating mean/SD",
        "_include" : "required"
      },
      "clustering_interface" :
      {
        "_datatype" : "interface",
        "_description" : "HDF5 link to clustering interface that was the source of the data shown here (can be link to this module, if clustering info is published here",
        "_include" : "required"
      },
      "clustering_module_path" :
      {
        "_datatype" : "str",
        "_description" : "Path to clustering interface",
        "_include" : "required"
      }
    },
    "BehavioralEvents" :
    {
      "_description" : "General container for storing event series",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "TimeSeries" ]
    },
    "BehavioralTimeSeries" :
    {
      "_description" : "General container for storing time series",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "TimeSeries" ]
    },
    "BehavioralEpochs" :
    {
      "_description" : "General container for storing intervals",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "IntervalSeries" ]
    },

    "UnitTimes" :
    {
      "_description" : "Estimated spike times from a single unit",
      "_include" : "optional",
      "unit_list" :
      {
        "_datatype" : "str",
        "_include" : "standard",
        "_description" : "List of unit names present in interface"
      },
      "<>" :
      {
        "_datatype" : "group",
        "_description" : "Folder storing data from one unit",
        "_include" : "optional",
        "times" :
        {
          "_datatype" : "f8",
          "_description" : "Spike times for the unit (exact or estimated)",
          "_include" : "required"
        },
        "unit_description" :
        {
          "_datatype" : "str",
          "_description" : "Description of the unit (eg, cell type)",
          "_include" : "required"
        },
        "source" : 
        {
          "_datatype" : "str",
          "_description" : "Name, path or description of where unit times originated, if it varies from the interface's source field",
          "_include" : "optional"
        },
        "[]" :
        {
          "_datatype" : "unrestricted",
          "_description" : "custom field",
          "_include" : "optional",
          "_attributes" : 
          {
            "neurodata_type" :
            {
              "_datatype" : "str",
              "_description" : "Custom field",
              "_value" : "Custom",
              "_include" : "required"
            }
          }
        }
      }
    },

    "ImageSegmentation" :
    {
      "_description" : "Stores groups of pixels that define regions of interest from one or more imaging planes",
      "_include" : "optional",
      "<>" :
      {
        "_datatype" : "group",
        "_description" : "Folder containing all segmentation data from a particular imaging plane. Group name is identifier for imaging plane",
        "_include" : "required",
        "description" :
        {
          "_datatype" : "str",
          "_description" : "Text description of imaging plane",
          "_include" : "optional"
        },
        "roi_list" : 
        {
          "_datatype" : "str",
          "_description" : "List of ROIs in this imaging plane",
          "_include" : "required"
        },
        "imaging_plane_name" : 
        {
          "_datatype" : "str",
          "_description" : "Name of imaging plane under general/optophysiology",
          "_include" : "required",
          "_linkto" : "general/optophysiology"
        },
        "reference_images" :
        {
          "_datatype" : "group",
          "_description" : "Folder storing reference images that ROIs are based on",
          "_include" : "required",
          "<>" :
          {
            "_datatype" : "timeseries",
            "_description" : "One or more time series storing an image that ROIs are based on",
            "_include" : "optional"
          },
          "[]" :
          {
            "_datatype" : "unrestricted",
            "_description" : "custom field",
            "_include" : "optional",
            "_attributes" : 
            {
              "neurodata_type" :
              {
                "_datatype" : "str",
                "_description" : "Custom field",
                "_value" : "Custom",
                "_include" : "required"
              }
            }
          }
		},
        "<>" :
        {
          "_datatype" : "group",
          "_description" : "Region of interest. Folder name is ROI identifier",
          "_include" : "required",
          "img_mask" :
          {
            "_datatype" : "f4",
            "_description" : "2D float array describing pixel mask. Values bounded on [0,1]. Array structure: [height][width]",
            "_include" : "required"
          },
          "pix_mask" :
          {
            "_datatype" : "uint16",
            "_description" : "2D int array listing pixels (x,y) that compose mask",
            "_include" : "required"
          },
          "pix_mask_weight" :
          {
            "_datatype" : "f4",
            "_description" : "Relative weight (between 0 and 1) of each pixel in pix_mask",
            "_include" : "required"
          },
          "roi_description" :
          {
            "_datatype" : "str",
            "_description" : "Description of this ROI",
            "_include" : "required"
          },
          "[]" :
          {
            "_datatype" : "unrestricted",
            "_description" : "custom field",
            "_include" : "optional",
            "_attributes" : 
            {
              "neurodata_type" :
              {
                "_datatype" : "str",
                "_description" : "Custom field",
                "_value" : "Custom",
                "_include" : "required"
              }
            }
          }
        },
        "[]" :
        {
          "_datatype" : "unrestricted",
          "_description" : "custom field",
          "_include" : "optional",
          "_attributes" : 
          {
            "neurodata_type" :
            {
              "_datatype" : "str",
              "_description" : "Custom field",
              "_value" : "Custom",
              "_include" : "required"
            }
          }
        }
      }
    },

    "Fluorescence" :
    {
      "_description" : "Fluorescence over time of one or more ROIs. TimeSeries names should correspond to imaging plane names",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "RoiResponseSeries" ]
    },
    "DfOverF" :
    {
      "_description" : "Df/f over time of one or more ROIs. TimeSeries names should correspond to imaging plane names",
      "_include" : "optional",
	    "_mandatory_timeseries" : [ "RoiResponseSeries" ]
    },
    "MotionCorrection" :
    {
      "_description" : "Image stacks whose frames have been shifted (registered) to account for motion",
      "_include" : "optional",
      "<>" :
      {
        "_datatype" : "group",
        "_description" : "One of possibly many image stacks that have been registered",
        "original" :
        {
          "_datatype" : "timeseries",
          "_description" : "HDF5 link to timeseries that contains uncorrected data",
          "_include" : "required"
        },
        "original_path" :
        {
          "_datatype" : "str",
          "_description" : "Path to timeseries that contains uncorrected data",
          "_include" : "required"
        },
        "xy_translation" :
        {
          "_datatype" : "timeseries",
          "_description" : "Timeseries storing x,y delta for each frame in 'original'",
          "_include" : "required"
        },
        "corrected" :
        {
          "_datatype" : "timeseries",
          "_description" : "Motion corrected ImageSeries",
          "_include" : "required"
        },
        "_attributes" :
        {
          "links" :
          {
            "_datatype" : "str",
            "_description" : "Paths of linked-to objects",
            "_include" : "standard"
          }
        }
      }
    },
    "ImagingRetinotopy" :
    {
      "_description" : "Intrinsic signal optical imaging or Widefield imaging for measuring retinotopy",
      "_include" : "optional",
      "axis_descriptions" :
      {
        "_datatype" : "str",
        "_description" : "Two-element array describing contents of the two response axis fields (e.g., ['azimuth','altitude'])",
        "_include" : "required"
      },
      "axis_1_phase_map" :
      {
        "_datatype" : "f4",
        "_description" : "2D float array storing phase response on the first measured axis",
        "_include" : "required",
        "_attributes" :
        {
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "unit" :
          {
            "_datatype" : "str",
            "_description" : "Unit that axis data is stored in (e.g., 'degrees')",
            "_include" : "required"
          }
        }
      },
      "axis_1_power_map" :
      {
        "_datatype" : "f4",
        "_description" : "2D float array storing power of response on the first measured axis. Response is scaled so 0.0 is no power in the response and 1.0 is maximum relative power",
        "_include" : "standard",
        "_attributes" :
        {
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          }
        }
      },
      "axis_2_phase_map" :
      {
        "_datatype" : "f4",
        "_description" : "2D float array storing calculated ISI response on the second measured axis",
        "_include" : "required",
        "_attributes" :
        {
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "unit" :
          {
            "_datatype" : "str",
            "_description" : "Unit that axis data is stored in (e.g., 'degrees')",
            "_include" : "required"
          }
        }
      },
      "axis_2_power_map" :
      {
        "_datatype" : "f4",
        "_description" : "2D float array storing power of response on the second measured axis. Response is scaled so 0.0 is no power in the response and 1.0 is maximum relative power",
        "_include" : "standard",
        "_attributes" :
        {
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "standard"
          }
        }
      },
      "sign_map" :
      {
        "_datatype" : "f4",
        "_description" : "2D float array storing the sine of the angle between the direction of the gradient in axis 1 + axis 2",
        "_include" : "required",
        "_attributes" :
        {
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          }
        }
      },
      "vasculature_image" :
      {
        "_datatype" : "uint16",
        "_description" : "Gray-scale anatomical image of cortical surface",
        "_include" : "standard",
        "_attributes" :
        {
          "format" :
          {
            "_datatype" : "str",
            "_description" : "Format of image (eg, png, tiff, raw). If 'raw' then image should be stored as 2D array in the format [rows][columns]. For now, only 'raw' supported",
            "_value" : "raw",
            "_include" : "required"
          },
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "bits_per_pixel" :
          {
            "_datatype" : "int32",
            "_description" : "Number of bits used to represent each image pixel. Necessary to determine maximum (white) pixel value",
            "_include" : "required"
          }
        }
      },
      "focal_depth_image" :
      {
        "_datatype" : "uint16",
        "_description" : "Gray-scale image taken with same settings/parameters (e.g., focal depth, wavelength) as data collection",
        "_include" : "standard",
        "_attributes" :
        {
          "format" :
          {
            "_datatype" : "str",
            "_description" : "Format of image (eg, png, tiff, raw). If 'raw' then image should be stored as 2D array in the format [rows][columns]. For now, only 'raw' supported",
            "_value" : "raw",
            "_include" : "required"
          },
          "dimension" :
          {
            "_datatype" : "int32",
            "_description" : "Int array storing number of rows and columns in the image. NOTE: row,column representation is equivalent to height,width",
            "_include" : "required"
          },
          "field_of_view" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "focal_depth" :
          {
            "_datatype" : "float",
            "_description" : "float array storing the height and width of the imaging area, in meters",
            "_include" : "required"
          },
          "bits_per_pixel" :
          {
            "_datatype" : "int32",
            "_description" : "Number of bits used to represent each image pixel. Necessary to determine maximum (white) pixel value",
            "_include" : "required"
          }
        }
      }
    }
  }
}

